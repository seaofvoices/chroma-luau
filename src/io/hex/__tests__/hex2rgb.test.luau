-- ROBLOX upstream: https://github.com/gka/chroma.js/blob/cd1b3c0926c7a85cbdc3b1453b3a94006de91a92/test/hex2rgb.test.js

local jestGlobals = require('@pkg/@jsdotlua/jest-globals')

local hex2rgb = require('../hex2rgb')

local expect = jestGlobals.expect
local test = jestGlobals.test
local describe = jestGlobals.describe

describe('Testing HEX2RGB color conversions', function()
    describe('parse simple #rrggbb HEX colors', function()
        local t = {
            '#000000',
            '#ffffff',
            '#ff0000',
            '#00ff00',
            '#0000ff',
            '#ffff00',
            '#00ffff',
            '#ff00ff',
        }

        test('black', function()
            expect(hex2rgb(t[1])).toEqual({ 0, 0, 0, 1 })
        end)
        test('white', function()
            expect(hex2rgb(t[2])).toEqual({ 255, 255, 255, 1 })
        end)
        test('red', function()
            expect(hex2rgb(t[3])).toEqual({ 255, 0, 0, 1 })
        end)
        test('green', function()
            expect(hex2rgb(t[4])).toEqual({ 0, 255, 0, 1 })
        end)
        test('blue', function()
            expect(hex2rgb(t[5])).toEqual({ 0, 0, 255, 1 })
        end)
        test('yellow', function()
            expect(hex2rgb(t[6])).toEqual({ 255, 255, 0, 1 })
        end)
        test('cyan', function()
            expect(hex2rgb(t[7])).toEqual({ 0, 255, 255, 1 })
        end)
        test('magenta', function()
            expect(hex2rgb(t[8])).toEqual({ 255, 0, 255, 1 })
        end)
    end)

    describe('parse simple rrggbb HEX colors without #', function()
        local t = { '000000', 'ffffff', 'ff0000', '00ff00', '0000ff', 'ffff00', '00ffff', 'ff00ff' }

        test('black', function()
            expect(hex2rgb(t[1])).toEqual({ 0, 0, 0, 1 })
        end)
        test('white', function()
            expect(hex2rgb(t[2])).toEqual({ 255, 255, 255, 1 })
        end)
        test('red', function()
            expect(hex2rgb(t[3])).toEqual({ 255, 0, 0, 1 })
        end)
        test('green', function()
            expect(hex2rgb(t[4])).toEqual({ 0, 255, 0, 1 })
        end)
        test('blue', function()
            expect(hex2rgb(t[5])).toEqual({ 0, 0, 255, 1 })
        end)
        test('yellow', function()
            expect(hex2rgb(t[6])).toEqual({ 255, 255, 0, 1 })
        end)
        test('cyan', function()
            expect(hex2rgb(t[7])).toEqual({ 0, 255, 255, 1 })
        end)
        test('magenta', function()
            expect(hex2rgb(t[8])).toEqual({ 255, 0, 255, 1 })
        end)
    end)

    describe('parse simple short-hand HEX colors', function()
        local t = { '#000', '#fff', '#f00', '#0f0', '#00f', '#ff0', '#0ff', '#f0f' }

        test('black', function()
            expect(hex2rgb(t[1])).toEqual({ 0, 0, 0, 1 })
        end)
        test('white', function()
            expect(hex2rgb(t[2])).toEqual({ 255, 255, 255, 1 })
        end)
        test('red', function()
            expect(hex2rgb(t[3])).toEqual({ 255, 0, 0, 1 })
        end)
        test('green', function()
            expect(hex2rgb(t[4])).toEqual({ 0, 255, 0, 1 })
        end)
        test('blue', function()
            expect(hex2rgb(t[5])).toEqual({ 0, 0, 255, 1 })
        end)
        test('yellow', function()
            expect(hex2rgb(t[6])).toEqual({ 255, 255, 0, 1 })
        end)
        test('cyan', function()
            expect(hex2rgb(t[7])).toEqual({ 0, 255, 255, 1 })
        end)
        test('magenta', function()
            expect(hex2rgb(t[8])).toEqual({ 255, 0, 255, 1 })
        end)
    end)

    describe('parse simple short-hand HEX colors without #', function()
        local t = { '000', 'fff', 'f00', '0f0', '00f', 'ff0', '0ff', 'f0f' }

        test('black', function()
            expect(hex2rgb(t[1])).toEqual({ 0, 0, 0, 1 })
        end)
        test('white', function()
            expect(hex2rgb(t[2])).toEqual({ 255, 255, 255, 1 })
        end)
        test('red', function()
            expect(hex2rgb(t[3])).toEqual({ 255, 0, 0, 1 })
        end)
        test('green', function()
            expect(hex2rgb(t[4])).toEqual({ 0, 255, 0, 1 })
        end)
        test('blue', function()
            expect(hex2rgb(t[5])).toEqual({ 0, 0, 255, 1 })
        end)
        test('yellow', function()
            expect(hex2rgb(t[6])).toEqual({ 255, 255, 0, 1 })
        end)
        test('cyan', function()
            expect(hex2rgb(t[7])).toEqual({ 0, 255, 255, 1 })
        end)
        test('magenta', function()
            expect(hex2rgb(t[8])).toEqual({ 255, 0, 255, 1 })
        end)
    end)

    describe('parse different #rrggbbaa HEX colors', function()
        local t = { '#00000000', '#ffffff80', '#ff000040', '#00FF00C0', '#FF00FFFF' }

        test('black', function()
            expect(hex2rgb(t[1])).toEqual({ 0, 0, 0, 0 })
        end)
        test('white', function()
            expect(hex2rgb(t[2])).toEqual({ 255, 255, 255, 0.5 })
        end)
        test('red', function()
            expect(hex2rgb(t[3])).toEqual({ 255, 0, 0, 0.25 })
        end)
        test('green', function()
            expect(hex2rgb(t[4])).toEqual({ 0, 255, 0, 0.75 })
        end)
        test('magenta', function()
            expect(hex2rgb(t[5])).toEqual({ 255, 0, 255, 1 })
        end)
    end)

    describe('parse different rrggbbaa HEX colors without #', function()
        local t = { '00000000', 'ffffff80', 'ff000040', '00FF00C0', 'FF00FFFF' }

        test('black', function()
            expect(hex2rgb(t[1])).toEqual({ 0, 0, 0, 0 })
        end)
        test('white', function()
            expect(hex2rgb(t[2])).toEqual({ 255, 255, 255, 0.5 })
        end)
        test('red', function()
            expect(hex2rgb(t[3])).toEqual({ 255, 0, 0, 0.25 })
        end)
        test('green', function()
            expect(hex2rgb(t[4])).toEqual({ 0, 255, 0, 0.75 })
        end)
        test('magenta', function()
            expect(hex2rgb(t[5])).toEqual({ 255, 0, 255, 1 })
        end)
    end)

    describe('parse different #rgba HEX colors', function()
        local t = { '#0000', '#fff8', '#f004', '#0F0C', '#F0FF' }

        test('black', function()
            expect(hex2rgb(t[1])).toEqual({ 0, 0, 0, 0 })
        end)
        test('white', function()
            expect(hex2rgb(t[2])).toEqual({ 255, 255, 255, 0.53 })
        end)
        test('red', function()
            expect(hex2rgb(t[3])).toEqual({ 255, 0, 0, 0.27 })
        end)
        test('green', function()
            expect(hex2rgb(t[4])).toEqual({ 0, 255, 0, 0.8 })
        end)
        test('magenta', function()
            expect(hex2rgb(t[5])).toEqual({ 255, 0, 255, 1 })
        end)
    end)

    describe('parse different rgba HEX colors without #', function()
        local t = { '0000', 'fff8', 'f004', '0F0C', 'F0FF' }

        test('black', function()
            expect(hex2rgb(t[1])).toEqual({ 0, 0, 0, 0 })
        end)
        test('white', function()
            expect(hex2rgb(t[2])).toEqual({ 255, 255, 255, 0.53 })
        end)
        test('red', function()
            expect(hex2rgb(t[3])).toEqual({ 255, 0, 0, 0.27 })
        end)
        test('green', function()
            expect(hex2rgb(t[4])).toEqual({ 0, 255, 0, 0.8 })
        end)
        test('magenta', function()
            expect(hex2rgb(t[5])).toEqual({ 255, 0, 255, 1 })
        end)
    end)
end)
